#version 450

//number of kernel per cells
#define K 8

//number of information contained in one kernel
#define NFLOATS 6

#define M_PI 3.14159265358979323846

layout(local_size_x = K) in;

layout(set = 0, binding = 0, r32f) coherent uniform imageBuffer u_Kernels;

layout(set = 0, binding = 1) uniform UniformBuffer{
  int u_GridX;
  int u_GridY;
};

shared float[K * NFLOATS * 9] kernels;
void main()
{
  int gi = int((gl_WorkGroupID.x)) % u_GridX;
  int gj = int((gl_WorkGroupID.x)) / u_GridX;
  
  int kernelId = int(gl_GlobalInvocationID.x - gl_WorkGroupID.x * K);
  
  
  /////////////////////////////////////////////
  ///Pre fetch
  /////////////////////////////////////////////
  
  //each kernel fetch himself and all the kernels with the same index in the neighbor cells
  {
    for (int j = -1; j <= 1; j++)
    {
      for (int i = -1; i <= 1; i++)
      {
        int ci = clamp(i + gi, 0, u_GridX - 1);
        int cj = clamp(j + gj, 0, u_GridY - 1);
        if (ci == i + gi && cj == j + gj)
        {
          int idx = ((ci + cj * u_GridX ) * K + kernelId) * NFLOATS;
          int kid = ((i + 1) + (j + 1) * 3) * K * NFLOATS + kernelId * NFLOATS;
          kernels[kid] = float(ci) + imageLoad(u_Kernels, int(idx + 0)).x;
          kernels[kid + 1] = float(cj) + imageLoad(u_Kernels, int(idx + 1)).x;
          kernels[kid + 2] = imageLoad(u_Kernels, int(idx + 2)).x;
          kernels[kid + 3] = imageLoad(u_Kernels, int(idx + 3)).x;
          kernels[kid + 4] = imageLoad(u_Kernels, int(idx + 4)).x;
          kernels[kid + 5] = imageLoad(u_Kernels, int(idx + 5)).x;
        }
        else
        {
          int kid = ((i + 1) + (j + 1) * 3) * K * NFLOATS + kernelId * NFLOATS;
          kernels[kid] = -10.0; //impossible values
          kernels[kid + 1] = -10.0;
          kernels[kid + 2] = 0.0f;
          kernels[kid + 3] = 0.0;
          kernels[kid + 4] = 0.0;
          kernels[kid + 5] = 0.0;
        }
      }
    }
    memoryBarrier();
  }
  
  {
    vec2 kpos, kdir;
    //        float kphase, kangle, kfrequ;
    int kid = 4 * K * NFLOATS + kernelId * NFLOATS;
    kpos.x = kernels[kid];
    kpos.y = kernels[kid + 1];
    kdir.x = kernels[kid + 4];
    kdir.y = kernels[kid + 5];
    
    vec2 phi = vec2(0.0);
    for (int k2 = 0; k2 < K * NFLOATS * 9; k2 += NFLOATS)
    {
      vec2 npos, ndir;
      float nphase, nfrequ;
      npos.x = kernels[k2];
      npos.y = kernels[k2 + 1];
      nfrequ = kernels[k2 + 2];
      nphase = kernels[k2 + 3];
      ndir.x = kernels[k2 + 4];
      ndir.y = kernels[k2 + 5];
      if (npos.x > -10.0)
      {
        float w = max(dot(kdir, ndir), 0.0);
        float osc = nfrequ * dot((kpos - npos), ndir) * 2.0 * M_PI + nphase;
        phi += w * vec2(cos(osc), sin(osc));
      }
    }
    // check the one with most votes
    {
      imageStore(u_Kernels, int(gl_GlobalInvocationID.x * NFLOATS) + 3, vec4(atan(phi.y, phi.x)));
    }
  }
}
