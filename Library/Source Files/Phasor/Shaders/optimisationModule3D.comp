#version 450

//number of kernel per cells
#define K 8 

//number of information contained in one kernel
#define NFLOATS 8

#define M_PI 3.14159265358979323846

layout(local_size_x = K) in;

layout(set = 0, binding = 0, r32f) coherent uniform imageBuffer u_Kernels;

layout(set = 0, binding = 1) uniform UniformBuffer{
    int u_GridX;
    int u_GridY;
    int u_GridZ;
};



float gaussian(vec3 p)
{
  return exp(-dot(p, p) * 2.1);
}

vec2 kernelAt(vec3 kpos, vec3 kdir, float kphase, float kfrequ, vec3 at)
{
  float g = gaussian(at - kpos);
  float a = kfrequ * dot((at - kpos), kdir) * 2.0 * M_PI + kphase;
  return vec2(g * cos(a), g * sin(a));
}

vec2 kernelAtOrtho(vec3 kpos, vec3 kdir, float kphase, float kfrequ, vec3 at)
{
  float g = gaussian(at - kpos);
  float a = kfrequ * dot((at - kpos),kdir) * 2.0 * M_PI + kphase;
  return vec2(g * cos(a), g * sin(a));
}


shared float[K * NFLOATS * 27] kernels;
void main()
{
    int gi = int((gl_WorkGroupID.x) % (u_GridY * u_GridX)) % u_GridX;
    int gj = int((gl_WorkGroupID.x) % (u_GridY * u_GridX)) / u_GridX;
    int gk = int(gl_WorkGroupID.x) / (u_GridY * u_GridX);

    int kernelId = int(gl_GlobalInvocationID.x - gl_WorkGroupID.x * K);


    /////////////////////////////////////////////
    ///Pre fetch
    /////////////////////////////////////////////
    {
        for (int j = -1; j <= 1; j++)
        {
            for (int i = -1; i <= 1; i++)
            {
                for (int k = -1; k <= 1; k++)
                {
                    int ci = clamp(i + gi, 0, u_GridX - 1);
                    int cj = clamp(j + gj, 0, u_GridY - 1);
                    int ck = clamp(k + gk, 0, u_GridZ - 1);
                    if (ci == i + gi && cj == j + gj && ck == k + gk)
                    {
                        int idx = ((ci + cj * u_GridX + ck * u_GridY * u_GridX) * K + kernelId) * NFLOATS;
                        int kid = ((i + 1) + (j + 1) * 3 + (k + 1) * 9) * K * NFLOATS + kernelId * NFLOATS;
                        kernels[kid] = float(ci) + imageLoad(u_Kernels, int(idx + 0)).x;
                        kernels[kid + 1] = float(cj) + imageLoad(u_Kernels, int(idx + 1)).x;
                        kernels[kid + 2] = float(ck) + imageLoad(u_Kernels, int(idx + 2)).x;
                        kernels[kid + 3] = imageLoad(u_Kernels, int(idx + 3)).x;
                        kernels[kid + 4] = imageLoad(u_Kernels, int(idx + 4)).x;
                        kernels[kid + 5] = imageLoad(u_Kernels, int(idx + 5)).x;
                        kernels[kid + 6] = imageLoad(u_Kernels, int(idx + 6)).x;
                        kernels[kid + 7] = imageLoad(u_Kernels, int(idx + 7)).x;
                    }
                    else
                    {
                        int kid = ((i + 1) + (j + 1) * 3 + (k + 1) * 9) * K * NFLOATS + kernelId * NFLOATS;
                        kernels[kid] = -10.0; //impossible values
                        kernels[kid + 1] = -10.0;
                        kernels[kid + 2] = -10.0;
                        kernels[kid + 3] = 0.0;
                        kernels[kid + 4] = 0.0;
                        kernels[kid + 5] = 0.0;
                    }
                }
            }
        }
        memoryBarrier();
    }

    {
        vec3 kpos, kdir;
//        float kphase, kangle, kfrequ;
        int kid = 13 * K * NFLOATS + kernelId * NFLOATS;
        kpos.x = kernels[kid];
        kpos.y = kernels[kid + 1];
        kpos.z = kernels[kid + 2];
//        kfrequ = kernels[kid + 3];
//        kphase = kernels[kid + 4];
        kdir.x = kernels[kid + 5];
        kdir.y = kernels[kid + 6];
        kdir.z = kernels[kid + 7];

        vec2 phi = vec2(0.0);
        for (int k2 = 0; k2 < K * NFLOATS * 27; k2 += NFLOATS)
        {
            vec3 npos, ndir;
            float nphase, nangle, nfrequ;
            npos.x = kernels[k2];
            npos.y = kernels[k2 + 1];
            npos.z = kernels[k2 + 2];
            nfrequ = kernels[k2 + 3];
            nphase = kernels[k2 + 4];
            ndir.x = kernels[k2 + 5];
            ndir.y = kernels[k2 + 6];
            ndir.z = kernels[k2 + 7];
            if (npos.x > -10.0)
            {
                float w = max(dot(kdir, ndir), 0.0);
                float osc = nfrequ * dot((kpos - npos), ndir) * 2.0 * M_PI + nphase;
                phi += w * vec2(cos(osc), sin(osc));
            }
        }
        // check the one with most votes
        {
            imageStore(u_Kernels, int(gl_GlobalInvocationID.x * NFLOATS) + 4, vec4(atan(phi.y, phi.x)));
        }
    }
}
