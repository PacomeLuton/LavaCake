#version 450
#define K 8
#define NFLOATS 6

#define M_PI 3.14159265358979323846

layout( local_size_x = 1) in;
layout(set = 0, binding = 1, r32f)    coherent uniform imageBuffer kernels;
layout(set = 0, binding = 2) uniform UniformBuffer{
  uvec2 cellSize;
  uvec2 resultSize;
  vec2  sampleMin;
  vec2  sampleMax;
  vec2  gridMin;
  vec2  gridMax;
  float  singleCellSize_mm;
};
layout(set = 0, binding = 3, r32f)    coherent uniform imageBuffer frequencyBuffer;
layout(set = 0, binding = 4, rg32f)   coherent uniform imageBuffer directionBuffer;
layout(set = 0, binding = 5, r32f)    coherent uniform imageBuffer divergenceBuffer;
layout(set = 0, binding = 6, r32f)    coherent uniform imageBuffer result;


float b = 9.0;
float a = 5.0;

vec2 du;
float f;
float div;
// --------------------------------------------

float gaussian(vec2 p)
{
  return exp(-dot(p, p) * b);
}

// --------------------------------------------

vec2 kernelAt(vec2 kpos, vec2 wi, float kphase, float kfrequ, vec2 at)
{
  vec2   x = at - kpos;
  vec2   w = du;
  float  fi = kfrequ;
  vec2 dfw = (fi * wi - f * w)*div;
  
  float g = exp(-(a*b / (a + b)) * dot(x, x))
  * exp(-M_PI * M_PI * (dot(dfw, dfw) / (a + b)));
  
  float  ocs =  (2.0 * M_PI * fi * dot(x, wi) + kphase) + (2.0 * M_PI * f * dot(dfw,x) * a/(a+b));
  return vec2(g * cos(ocs), g * sin(ocs));
}

// --------------------------------------------

void main()
{
  
  vec2 sampleSize = sampleMax - sampleMin;
  //vec2 gridSize   = gridMax - gridMin;
  
  vec2 gridcoord  = (vec2(gl_WorkGroupID.xy)/vec2(resultSize)  * sampleSize) +  sampleMin;
  
  gridcoord = (gridcoord - gridMin)/ vec2(singleCellSize_mm);
  
  {
    ivec2 coord = ivec2(gl_WorkGroupID.xy);
    
    f = imageLoad(frequencyBuffer, int(coord.x + coord.y * resultSize.x)).x;
    du = imageLoad(directionBuffer, int(coord.x + coord.y * resultSize.x)).xy;
    div = imageLoad(divergenceBuffer, int(coord.x + coord.y * resultSize.x)).x;
  }
  
  
  int gi   = int(gridcoord.x);
  int gj   = int(gridcoord.y);
  vec2 kv  = vec2(0.0);
  
  
  for (int nj = gj - 2; nj <= gj + 2; nj++) {
    for (int ni = gi - 2; ni <= gi + 2; ni++) {
      int ci = clamp(ni, 0, int(cellSize.x - 1));
      int cj = clamp(nj, 0, int(cellSize.y - 1));
      if(ci == ni && cj == nj){
        for (int k = 0; k < K; k++) {
          // fetch kernel
          vec2 npos, ndir;
          float nphase, nfrequ;
          int idx = (int((ci + cj * cellSize.x)) * K + k) * NFLOATS;
          npos.x = float(ci) + imageLoad(kernels, (int(idx) + 0)).x;
          npos.y = float(cj) + imageLoad(kernels, (int(idx) + 1)).x;
          nfrequ = imageLoad(kernels, (int(idx) + 2)).x;
          nphase = imageLoad(kernels, (int(idx) + 3)).x;
          ndir.x = imageLoad(kernels, (int(idx) + 4)).x;
          ndir.y = imageLoad(kernels, (int(idx) + 5)).x;
          // evaluate
          kv.xy += kernelAt(npos, ndir, nphase, nfrequ, gridcoord);
        }
      }
    }
  }
  
  
  
  float ph = atan(kv.y, kv.x);
  
  imageStore(result, int(gl_WorkGroupID.x + gl_WorkGroupID.y * resultSize.x), vec4(ph/(2.0*M_PI) +0.5,0.0,0.0,0.0));
  //imageStore(result, int(gl_WorkGroupID.x + gl_WorkGroupID.y * resultSize.x), vec4(gi/12.0,0.0,0.0,0.0));
}

// --------------------------------------------
